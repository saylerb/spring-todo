plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.6'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(24)
        vendor = JvmVendorSpec.ADOPTIUM
    }
}

sourceSets {
    databaseTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    databaseTestImplementation.extendsFrom implementation, testImplementation
    databaseTestRuntimeOnly.extendsFrom runtimeOnly
}

idea {
    module {
        testSourceDirs += sourceSets.databaseTest.java.srcDirs
        testResourceDirs += sourceSets.databaseTest.resources.srcDirs
    }
}

repositories {
    mavenCentral()
}

bootJar {
    archiveBaseName = 'spring-todo'
    archiveVersion = '0.1.0'
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-hateoas')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    implementation('org.flywaydb:flyway-core:9.22.3')
    runtimeOnly('org.postgresql:postgresql')
}


bootRun {
    String activeProfile = System.properties['spring.profiles.active']
    systemProperty "spring.profiles.active", activeProfile
    jvmArgs '--enable-native-access=ALL-UNNAMED'
}

test {
    useJUnitPlatform()
    systemProperty 'spring.profiles.active', 'test'
    jvmArgs '--enable-native-access=ALL-UNNAMED'
    testLogging {
        events "passed", "skipped", "failed", "started"
        minGranularity = 2
    }
    beforeTest { descriptor ->
        logger.lifecycle("Running test: ${descriptor}")
    }
    afterTest { descriptor, result ->
        logger.lifecycle("Test: ${descriptor} with result: ${result.resultType}")
    }
}

task databaseTest(type: Test) {
    group = 'verification'
    description = 'Runs database tests.'
    testClassesDirs = sourceSets.databaseTest.output.classesDirs
    classpath = sourceSets.databaseTest.runtimeClasspath
    systemProperty 'spring.profiles.active', 'test'
    jvmArgs '--enable-native-access=ALL-UNNAMED'
    testLogging {
        events "passed", "skipped", "failed", "started"
        exceptionFormat = 'full'
        showExceptions = true
        showCauses = true
        showStackTraces = true
    }
    shouldRunAfter test
}

check.dependsOn databaseTest
